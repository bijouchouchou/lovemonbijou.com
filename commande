<main>
  <h1>Catalogue Interactif avec Commande</h1>

  <div>
    <label for="typeSelect">Type de produit:</label>
    <select id="typeSelect">
      <option value="">--Tous les types--</option>
    </select>

    <label for="titleSelect">Titre du produit:</label>
    <select id="titleSelect">
      <option value="">--Tous les titres--</option>
    </select>

    <label for="priceSort">Trier par prix:</label>
    <select id="priceSort">
      <option value="">--Aucun--</option>
      <option value="asc">Prix croissant</option>
      <option value="desc">Prix décroissant</option>
    </select>
  </div>

  <table id="productTable">
    <thead>
      <tr>
        <th>Titre</th>
        <th>Couleur</th>
        <th>Or</th>
        <th>Poids</th>
        <th>Quantités par taille</th>
        <th>Prix (€)</th>
        <th>Taille</th>
        <th>Quantité</th>
        <th>Commande</th>
      </tr>
    </thead>
    <tbody></tbody>
  </table>

  <h2>Panier</h2>
  <ul id="cartList"></ul>
  <p>Total: €<span id="cartTotal">0.00</span></p>

  <div>
    <label for="paymentMethod">Choisir le mode de paiement:</label>
    <select id="paymentMethod">
      <option value="stripe">Stripe</option>
      <option value="alma">Alma (paiement en plusieurs fois)</option>
      <option value="paypal">PayPal</option>
    </select>
    <button id="checkoutBtn">Payer</button>
  </div>

  <script>
    let products = [];
    let cart = JSON.parse(localStorage.getItem('cart') || '[]');

    async function loadProducts() {
      try {
        const res = await fetch('/.netlify/functions/get-products');
        if (!res.ok) throw new Error('Erreur lors du chargement des produits');
        products = await res.json();
        populateTypeDropdown();
        populateTable();
        renderCart();
      } catch (err) {
        console.error(err);
        alert('Impossible de charger le catalogue. Vérifiez la console.');
      }
    }

    function populateTypeDropdown() {
      const typeSelect = document.getElementById('typeSelect');
      const types = [...new Set(products.map(p => p.couleur))];
      types.forEach(type => {
        const option = document.createElement('option');
        option.value = type;
        option.textContent = type;
        typeSelect.appendChild(option);
      });
    }

    function populateTitleDropdown(selectedType) {
      const titleSelect = document.getElementById('titleSelect');
      titleSelect.innerHTML = '<option value="">--Tous les titres--</option>';
      const filtered = selectedType ? products.filter(p => p.couleur === selectedType) : products;
      const titles = [...new Set(filtered.map(p => p.titre))];
      titles.forEach(title => {
        const option = document.createElement('option');
        option.value = title;
        option.textContent = title;
        titleSelect.appendChild(option);
      });
    }

    function parseSizes(sizesField) {
      if (!sizesField) return [];
      try {
        return JSON.parse(sizesField);
      } catch {
        return [];
      }
    }

    function addToCart(reference, selectedSize, quantity) {
      const product = products.find(p => p.reference === reference);
      if (!product) return alert('Produit introuvable');
      if (!selectedSize) return alert('Veuillez sélectionner une taille.');
      if (!quantity || quantity < 1) return alert('Veuillez sélectionner une quantité valide.');

      cart.push({
        reference: product.reference,
        titre: product.titre,
        price: product.price,
        taille: selectedSize,
        quantity: parseInt(quantity, 10)
      });

      localStorage.setItem('cart', JSON.stringify(cart));
      renderCart();
      alert(`Produit "${product.titre}" (${selectedSize}) x${quantity} ajouté au panier !`);
    }

    function populateTable() {
      const tbody = document.querySelector('#productTable tbody');
      tbody.innerHTML = '';

      const selectedType = document.getElementById('typeSelect').value;
      const selectedTitle = document.getElementById('titleSelect').value;
      const priceSort = document.getElementById('priceSort').value;

      let filtered = products;
      if (selectedType) filtered = filtered.filter(p => p.couleur === selectedType);
      if (selectedTitle) filtered = filtered.filter(p => p.titre === selectedTitle);

      if (priceSort === 'asc') filtered.sort((a,b) => a.price - b.price);
      if (priceSort === 'desc') filtered.sort((a,b) => b.price - a.price);

      filtered.forEach(p => {
        const sizesArray = parseSizes(p.autre_pierre);
        const sizeOptions = sizesArray.map(s => 
          `<option value="${s.size}">${s.size} (${s.quantity})</option>`
        ).join('');

        const tr = document.createElement('tr');
        tr.innerHTML = `
          <td>${p.titre}</td>
          <td>${p.couleur}</td>
          <td>${p.or || ''}</td>
          <td>${p.poids || ''}</td>
          <td>${sizesArray.map(s => `${s.size}: ${s.quantity}`).join('<br>')}</td>
          <td>${p.price.toFixed(2)}</td>
          <td>
            <select class="sizeSelect">
              <option value="">--Choisir--</option>
              ${sizeOptions}
            </select>
          </td>
          <td>
            <input type="number" class="qtyInput" min="1" value="1" style="width:50px">
          </td>
          <td><button class="orderBtn">Commander</button></td>
        `;
        tbody.appendChild(tr);

        const btn = tr.querySelector('.orderBtn');
        const select = tr.querySelector('.sizeSelect');
        const qtyInput = tr.querySelector('.qtyInput');

        btn.addEventListener('click', () => {
          addToCart(p.reference, select.value, qtyInput.value);
        });
      });
    }

    function renderCart() {
      const cartList = document.getElementById('cartList');
      const totalEl = document.getElementById('cartTotal');
      cartList.innerHTML = '';

      let total = 0;
      cart.forEach((item, index) => {
        total += item.price * item.quantity;
        const li = document.createElement('li');
        li.innerHTML = `
          ${item.titre} (${item.taille}) x${item.quantity} - €${(item.price * item.quantity).toFixed(2)}
          <button data-index="${index}" class="removeBtn">Retirer</button>
        `;
        cartList.appendChild(li);
      });

      totalEl.textContent = total.toFixed(2);

      document.querySelectorAll('.removeBtn').forEach(btn => {
        btn.addEventListener('click', e => {
          const idx = e.target.dataset.index;
          cart.splice(idx,1);
          localStorage.setItem('cart', JSON.stringify(cart));
          renderCart();
        });
      });
    }

    async function checkout() {
      if (cart.length === 0) return alert('Panier vide !');

      const paymentMethod = document.getElementById('paymentMethod').value;

      try {
        const res = await fetch('/.netlify/functions/create-checkout-session', {
          method: 'POST',
          body: JSON.stringify({ cart, shippingFee: 0, paymentMethod }),
          headers: { 'Content-Type': 'application/json' }
        });

        const data = await res.json();
        if (!res.ok) throw new Error(data.error || 'Erreur lors de la création de la session');

        if (paymentMethod === 'stripe' || paymentMethod === 'alma') {
          // Redirection Stripe Checkout
          const stripe = Stripe('pk_test_PASTE_YOUR_PUBLISHABLE_KEY'); 
          await stripe.redirectToCheckout({ sessionId: data.id });
        } else if (paymentMethod === 'paypal') {
          alert('Redirection PayPal à implémenter');
        }
      } catch (err) {
        alert(err.message);
        console.error(err);
      }
    }

    document.getElementById('typeSelect').addEventListener('change', e => {
      populateTitleDropdown(e.target.value);
      populateTable();
    });
    document.getElementById('titleSelect').addEventListener('change', populateTable);
    document.getElementById('priceSort').addEventListener('change', populateTable);
    document.getElementById('checkoutBtn').addEventListener('click', checkout);

    loadProducts();
  </script>
</main>
